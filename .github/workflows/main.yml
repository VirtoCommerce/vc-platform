name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  unit-tests:
    name: Unit Tests
    # The type of runner that the job will run on
    runs-on: windows-latest
    env:
      SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Install VirtoCommerce.GlobalTool
      run: dotnet tool install --global VirtoCommerce.GlobalTool --version 3.0.0-beta0010

    - name: Install dotnet-sonarscanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: SonarCloud Begin
      if: ${{ env.SONAR_TOKEN != 0 }}
      shell: pwsh
      run: |
        $BRANCH='${{ github.ref }}'.Replace('refs/heads', '')
        $CMD="dotnet sonarscanner begin /k:'VirtoCommerce_vc-platform'"
        $CMD="$($CMD) /o:'virto-commerce'"
        $CMD="$($CMD) /d:sonar.cs.opencover.reportsPaths='$PWD/.tmp/coverage.xml'"
        $CMD="$($CMD) /d:sonar.host.url='https://sonarcloud.io'"
        $CMD="$($CMD) /d:sonar.login='${{ secrets.SONAR_TOKEN }}'"
        $CMD = "$($CMD) /d:sonar.branch='$($BRANCH)'"
        if ('${{ github.event_name }}' -eq 'pull_request' ) {
          $CMD="$($CMD) /d:sonar.pullrequest.base='$('${{ github.event.pull_request.base.ref }}')'"
          $CMD="$($CMD) /d:sonar.pullrequest.branch='${{ github.event.pull_request.title }}'"
          $CMD="$($CMD) /d:sonar.pullrequest.key=${{ github.event.number }}"
        }
        pwsh -command $CMD

    - name: Build
      run: vc-build Compile

    - name: Unit Tests
      run: vc-build Test -skip Restore+Compile

    - name: SonarCloud End
      if: ${{ env.SONAR_TOKEN != 0 }}
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  build-package:
    name: Build Package
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install VirtoCommerce.GlobalTool
      run: |
        dotnet tool install --global VirtoCommerce.GlobalTool --version 3.0.0-beta0010
        mv Directory.Build.Props Directory.Build.props

    - name: Build Package
      run: vc-build Compress -skip Test

    - name: Build Docker Image
      run: |
        REPOSITORY=$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]') 
        pwsh -command "Invoke-WebRequest -Uri https://raw.githubusercontent.com/VirtoCommerce/jenkins-pipeline-scripts/master/resources/docker.core/linux/platform/Dockerfile -OutFile artifacts/publish/Dockerfile"
        docker build artifacts/publish --build-arg SOURCE=. --tag "docker.pkg.github.com/$REPOSITORY/platform:${{ github.sha }}"

    - name: Docker Login
      uses: azure/docker-login@v1
      with:
        login-server: docker.pkg.github.com
        username: $GITHUB_ACTOR
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: Platform # optional
        # A file, directory or wildcard pattern that describes what to upload
        path: artifacts/publish/  

    - name: Push Docker Image to GitHub
      run: |
        REPOSITORY=$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]') 
        docker push "docker.pkg.github.com/$REPOSITORY/platform:${{ github.sha }}"

  swagger-validation:
    name: Swagger Schema Validation
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build-package

    steps:
    - uses: actions/checkout@v2

    - name: Install VirtoCommerce.GlobalTool
      run: dotnet tool install --global VirtoCommerce.GlobalTool --version 3.0.0-beta0010

    - name: Download a Build Artifact
      uses: actions/download-artifact@v2
      with:
        # Artifact name
        name: Platform # optional
        # Destination path
        path: artifacts/publish/ # optional

    - name: Docker Login
      uses: azure/docker-login@v1
      with:
        login-server: docker.pkg.github.com
        username: $GITHUB_ACTOR
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull Platform Docker Image from GitHub
      run: |
        REPOSITORY=$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]') 
        docker pull "docker.pkg.github.com/$REPOSITORY/platform:${{ github.sha }}"

    - name: Run container
      run: |
        REPOSITORY=$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]') 
        mkdir docker
        cd docker
        pwsh -command "Invoke-WebRequest -Uri https://raw.githubusercontent.com/VirtoCommerce/jenkins-pipeline-scripts/master/resources/docker.core/linux/docker-compose.yml -OutFile docker-compose.yml"
        pwsh -command "((Get-Content -path docker-compose.yml -Raw) -replace 'virtocommerce/platform','docker.pkg.github.com/$REPOSITORY/platform') | Set-Content -Path docker-compose.yml"
        pwsh -command "((Get-Content -path docker-compose.yml -Raw) -replace 'MultipleActiveResultSets=True','MultipleActiveResultSets=False') | Set-Content -Path docker-compose.yml"
        echo PLATFORM_DOCKER_TAG=${{ github.sha }} >> .env
        echo STOREFRONT_DOCKER_TAG=3.0-preview-linux >> .env
        echo DOCKER_PLATFORM_PORT=8081 >> .env
        echo DOCKER_STOREFRONT_PORT=8082 >> .env
        echo DOCKER_SQL_PORT=8083 >> .env
        echo COMPOSE_PROJECT_NAME=virtocommerce >> .env
        docker-compose up -d

    - name: Install Modules
      run: |
        pwsh -command "Invoke-WebRequest -Uri https://raw.githubusercontent.com/VirtoCommerce/jenkins-pipeline-scripts/master/resources/docker_v3/vc-setup-modules.ps1 -OutFile vc-setup-modules.ps1"
        pwsh -command "Invoke-WebRequest -Uri https://raw.githubusercontent.com/VirtoCommerce/jenkins-pipeline-scripts/master/resources/docker_v3/vc-check-installed-modules.ps1 -OutFile vc-check-installed-modules.ps1"
        pwsh -command "./vc-setup-modules.ps1 -ApiUrl http://localhost:8081 -NeedRestart -ContainerId virtocommerce_vc-platform-web_1 -Verbose -Debug"
        pwsh -command "./vc-check-installed-modules.ps1 -ApiUrl http://localhost:8081 -Verbose -Debug"

    - name: Install Sample Data
      run: |
        pwsh -command "Invoke-WebRequest -Uri https://raw.githubusercontent.com/VirtoCommerce/jenkins-pipeline-scripts/master/resources/docker_v3/vc-setup-sampledata.ps1 -OutFile vc-setup-sampledata.ps1"
        pwsh -command "./vc-setup-sampledata.ps1 -ApiUrl http://localhost:8081 -Verbose -Debug"

    - name: Swagger Schema Validation
      run: |
        pwsh -command "Invoke-WebRequest -Uri https://raw.githubusercontent.com/VirtoCommerce/jenkins-pipeline-scripts/master/resources/docker_v3/vc-get-swagger.ps1 -OutFile vc-get-swagger.ps1"
        pwsh -command "./vc-get-swagger.ps1 -ApiUrl http://localhost:8081 -OutFile swaggerSchema.json -Verbose -Debug"
        pwsh -command "vc-build ValidateSwaggerSchema -SwaggerSchemaPath swaggerSchema.json"

  publish:
    name: Publish image
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [build-package, unit-tests, swagger-validation]

    steps:
    - name: Docker Login
      uses: azure/docker-login@v1
      with:
        login-server: docker.pkg.github.com
        username: $GITHUB_ACTOR
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull Platform Docker Image from GitHub
      run: |
        REPOSITORY=$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]') 
        docker pull "docker.pkg.github.com/$REPOSITORY/platform:${{ github.sha }}"

    - name: Push Docker Image to docker.pkg.github.com
      shell: pwsh
      run: |
        $REPOSITORY = "docker.pkg.github.com/$('${{ github.repository }}'.ToLower())/platform"
        $PLATFORM_DOCKER_TAG = ''
        if ('${{ github.ref }}' -eq 'refs/heads/master') {
          $PLATFORM_DOCKER_TAG = 'linux-latest'
        }
        elseif ('${{ github.event_name }}' -eq 'pull_request') {
          $PLATFORM_DOCKER_TAG = '${{ github.event.pull_request.head.ref }}'
        }
        else {
          $PLATFORM_DOCKER_TAG = "$('${{ github.ref }}'.Replace('refs/heads/', ''))-linux-latest"
        }

        $PLATFORM_DOCKER_TAG = $PLATFORM_DOCKER_TAG.Replace('/', '_')
        
        docker tag "$($REPOSITORY):${{ github.sha }}" "$($REPOSITORY):$($PLATFORM_DOCKER_TAG)"
        docker push "$($REPOSITORY):$($PLATFORM_DOCKER_TAG)"

    - name: Push Docker Image to hub.docker.io
      if: ${{ env.DOCKER_USERNAME != 0 && env.DOCKER_TOKEN != 0 && github.event_name != 'pull_request' }}
      env:
        DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
        DOCKER_TOKEN: ${{secrets.DOCKER_TOKEN}}
      run: |
        REPOSITORY=$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]') 
        PLATFORM_DOCKER_TAG='dev-linux-experimental'
        if [ '${{ github.ref }}' = 'refs/heads/master' ]; then PLATFORM_DOCKER_TAG=linux-experimental; fi
        docker tag docker.pkg.github.com/$REPOSITORY/platform:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/platform:$PLATFORM_DOCKER_TAG
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
        docker push ${{ secrets.DOCKER_USERNAME }}/platform:$PLATFORM_DOCKER_TAG